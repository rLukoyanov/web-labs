import axios from 'axios';
import { getToken as getStorageToken } from '@utils/localStorage';

// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
const isDevelopment = import.meta.env.MODE === 'development';
const API_BASE_URL = isDevelopment ? '' : import.meta.env.VITE_API_URL;

console.log('[axios] Environment:', import.meta.env.MODE);
console.log('[axios] baseURL =', API_BASE_URL);

export const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  withCredentials: true, // –í–∞–∂–Ω–æ –¥–ª—è CORS
});

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç–æ–∫–µ–Ω–∞
axiosInstance.interceptors.request.use(
  (config) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    const token = getStorageToken();
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    console.log('üöÄ Request:', {
      method: config.method?.toUpperCase(),
      url: config.url,
      headers: {
        ...config.headers,
        Authorization: config.headers?.Authorization ? '[HIDDEN]' : undefined,
      },
      data: config.data,
    });
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error.message);
    return Promise.reject(error);
  }
);

axiosInstance.interceptors.response.use(
  (response) => {
    console.log('‚úÖ Response:', {
      status: response.status,
      statusText: response.statusText,
      data: response.data,
      headers: response.headers,
    });
    return response;
  },
  (error) => {
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
      console.error('‚ùå Response Error:', {
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data,
      });
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
      console.error('‚ùå Network Error:', error.message);
    } else {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      console.error('‚ùå Request Setup Error:', error.message);
    }
    return Promise.reject(error);
  }
);
